{"version":3,"file":"corePackages/geoview-basemap-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-basemap-panel/src/basemap-panel.tsx","webpack://geoview-core/../geoview-basemap-panel/src/index.tsx"],"sourcesContent":["import {\n  toJsonObject,\n  TypeBasemapProps,\n  TypeBasemapOptions,\n  TypeJsonObject,\n  TypeSelectChangeEvent,\n  TypeWindow,\n  TypeMapView,\n} from 'geoview-core';\n\nimport { mapViewProjectionPayload } from 'geoview-core/src/api/events/payloads/map-view-projection-payload';\n\nconst w = window as TypeWindow;\n\ninterface BaseMapPanelProps {\n  mapId: string;\n  config: TypeJsonObject;\n}\n\nexport function BasemapPanel(props: BaseMapPanelProps): JSX.Element {\n  const { mapId, config } = props;\n\n  const { cgpv } = w;\n  const myMap = cgpv.api.map(mapId);\n\n  const { api, react, ui } = cgpv;\n  const { Select, Card, CardHeader, CardContent } = ui.elements;\n\n  const { useState, useEffect } = react;\n\n  const useStyles = ui.makeStyles((theme) => ({\n    basemapCard: {\n      backgroundColor: theme.palette.primary.dark,\n      color: theme.palette.primary.light,\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundClip: 'padding-box',\n      border: `1px solid ${theme.basemapPanel.borderDefault}`,\n      borderRadius: 0,\n      boxShadow: 'none',\n      marginBottom: 16,\n      transition: 'all 0.3s ease-in-out',\n      '&:last-child': {\n        marginBottom: 0,\n      },\n      '& .MuiCardHeader-root': {\n        backgroundColor: theme.palette.primary.dark,\n        color: theme.basemapPanel.header,\n        margin: 0,\n        padding: '0 8px',\n        fontSize: 14,\n        height: 60,\n        width: '100%',\n        order: 2,\n      },\n      '& .MuiCardContent-root': {\n        order: 1,\n        height: 190,\n        position: 'relative',\n        padding: 0,\n        '&:last-child': {\n          padding: 0,\n        },\n        '& .basemapCardThumbnail': {\n          position: 'absolute',\n          height: '100%',\n          width: '100%',\n          objectFit: 'cover',\n          top: 0,\n          left: 0,\n        },\n        '& .basemapCardThumbnailOverlay': {\n          display: 'block',\n          height: '100%',\n          width: '100%',\n          position: 'absolute',\n          backgroundColor: theme.basemapPanel.overlayDefault,\n          transition: 'all 0.3s ease-in-out',\n        },\n      },\n      '&:hover': {\n        cursor: 'pointer',\n        borderColor: theme.basemapPanel.borderHover,\n        '& .MuiCardContent-root': {\n          '& .basemapCardThumbnailOverlay': {\n            backgroundColor: theme.basemapPanel.overlayHover,\n          },\n        },\n      },\n      '&.active': {\n        borderColor: theme.basemapPanel.borderActive,\n        '& .MuiCardContent-root': {\n          '& .basemapCardThumbnailOverlay': {\n            backgroundColor: theme.basemapPanel.overlayActive,\n          },\n        },\n        '&:hover': {\n          borderColor: 'rgba(255,255,255,0.75)',\n          '& .MuiCardContent-root': {\n            '& .basemapCardThumbnailOverlay': {\n              backgroundColor: 'rgba(0,0,0,0)',\n            },\n          },\n        },\n      },\n    },\n  }));\n  const classes = useStyles();\n\n  const [basemapList, setBasemapList] = useState<TypeBasemapProps[]>([]);\n  const [activeBasemapId, setActiveBasemapId] = useState<string>('');\n  const [canSwichProjection] = useState(config.canSwichProjection);\n\n  // TODO: change the path for getting projection on schema refactor\n  const projections: number[] =\n    (config.supportedProjections as Array<TypeJsonObject>).map((obj: TypeJsonObject) => obj?.projectionCode as number) || [];\n  const [mapProjection, setMapProjection] = useState(myMap.mapProps.map.projection);\n\n  /**\n   * Update the basemap with the layers on the map\n   *\n   * @param {string} id update the basemap on the map\n   */\n  const setBasemap = (id: string) => {\n    // set the new basemap and update the active basemap variable\n    myMap.basemap.setBasemap(id);\n    setActiveBasemapId(id);\n  };\n\n  /**\n   *  Add basemaps from configuration for selected projection\n   *\n   * @param {number} projection the projection to create basemaps for\n   */\n  const createBasemapArray = async (projection: number) => {\n    const basemapsArray: TypeJsonObject = toJsonObject(\n      (config.supportedProjections as Array<TypeJsonObject>).find((obj: TypeJsonObject) => obj.projectionCode === projection)\n    );\n    let isInit = false;\n\n    // reset the basemaps array\n    api.map(mapId).basemap.basemaps = [];\n    setBasemapList([]);\n\n    // create the custom config basemap\n    for (let basemapIndex = 0; basemapIndex < basemapsArray.customBasemaps.length; basemapIndex++) {\n      const customBasemap = basemapsArray.customBasemaps[basemapIndex] as TypeJsonObject;\n      const basemap = api.map(mapId).basemap.createCustomBasemap(customBasemap as unknown as TypeBasemapProps);\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\n\n      // custom basemap are provided set it by default (can't be set as basemap from geoview config)\n      if (basemap && basemapIndex === 0 && activeBasemapId === '') {\n        setBasemap(basemap.id!);\n        isInit = true;\n      }\n    }\n\n    // create the core basemap\n    for (let basemapIndex = 0; basemapIndex < basemapsArray.coreBasemaps.length; basemapIndex++) {\n      const basemapOptions = basemapsArray.coreBasemaps[basemapIndex] as TypeJsonObject;\n      // eslint-disable-next-line no-await-in-loop\n      const basemap = await api.map(mapId).basemap.createCoreBasemap(basemapOptions as unknown as TypeBasemapOptions, projection);\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\n\n      // set basemap if previously selected in previous projection\n      const id = `${basemapOptions.shaded ? 'shaded' : ''}${basemapOptions.id}${basemapOptions.labeled ? 'label' : ''}`;\n      if (basemap && id === activeBasemapId && !isInit) {\n        setBasemap(activeBasemapId);\n        isInit = true;\n      }\n    }\n\n    // if previous basemap does not exist in previous projection, init first one\n    if (!isInit) setBasemap(myMap.basemap.basemaps[0].id as string);\n  };\n\n  /**\n   * Set new projection view and basemap array\n   *\n   * @param {TypeSelectChangeEvent} event select change element event\n   */\n  const setSelectedProjection = (event: TypeSelectChangeEvent<unknown>) => {\n    const projection = event.target.value as number;\n\n    // set basemap to no geom to clean up the view\n    setBasemap('nogeom');\n    setMapProjection(projection);\n\n    // get view status (center and projection) to calculate new center\n    const currentView = myMap.getView();\n    const currentCenter = currentView.getCenter();\n    const currentProjection = currentView.getProjection().getCode();\n    const newCenter = api.projection.transformPoints(currentCenter, currentProjection, 'EPSG:4326')[0];\n    const newProjection = `EPSG:${event.target.value as number}`;\n\n    const newView: TypeMapView = {\n      zoom: currentView.getZoom() as number,\n      minZoom: currentView.getMinZoom(),\n      maxZoom: currentView.getMaxZoom(),\n      center: newCenter as number[],\n      projection: newProjection,\n    };\n\n    // set new view and basemaps array (with selected basemap)\n    myMap.setView(newView);\n    createBasemapArray(projection);\n\n    // emit an event to let know map view projection as changed\n    api.event.emit(mapViewProjectionPayload(api.eventNames.MAP.EVENT_MAP_VIEW_PROJECTION_CHANGE, mapId, projection));\n  };\n\n  /**\n   * load existing basemaps and create new basemaps\n   */\n  useEffect(() => {\n    createBasemapArray(mapProjection);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      {canSwichProjection && (\n        <Select\n          fullWidth\n          labelId=\"projection-label\"\n          value={mapProjection}\n          onChange={setSelectedProjection}\n          label=\"Projection\"\n          style={{\n            display: config.canSwichProjection ? 'flex' : 'none',\n          }}\n          inputLabel={{\n            id: 'projection-label',\n          }}\n          menuItems={projections.map((value: number) => ({\n            key: value,\n            item: {\n              value,\n              children: `EPSG:${value}`,\n            },\n          }))}\n        />\n      )}\n\n      {basemapList.map((basemap: TypeBasemapProps) => {\n        return (\n          <Card\n            tabIndex={0}\n            classes={{ root: classes.basemapCard }}\n            className={`${basemap.id === activeBasemapId ? 'active' : ''}`}\n            onClick={() => setBasemap(basemap.id as string)}\n            onKeyPress={() => setBasemap(basemap.id as string)}\n            key={basemap.id}\n          >\n            <CardHeader title={basemap.name} type=\"h3\" disableTypography />\n            <CardContent>\n              {typeof basemap.thumbnailUrl === 'string' && (\n                <img src={basemap.thumbnailUrl} alt={basemap.altText} className=\"basemapCardThumbnail\" />\n              )}\n              {Array.isArray(basemap.thumbnailUrl) &&\n                basemap.thumbnailUrl.map((thumbnail, index) => {\n                  // eslint-disable-next-line react/no-array-index-key\n                  return <img key={index} src={thumbnail} alt={basemap.altText} className=\"basemapCardThumbnail\" />;\n                })}\n              <div className=\"basemapCardThumbnailOverlay\" />\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","import {\n  Cast,\n  AbstractPluginClass,\n  TypePluginOptions,\n  TypeIconButtonProps,\n  TypeButtonPanel,\n  TypeWindow,\n  toJsonObject,\n  TypePanelProps,\n  TypeSchemaObject,\n  TypeJsonObject,\n} from 'geoview-core';\n\nimport { BasemapPanel } from './basemap-panel';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-basemap-panel.json';\n\nconst w = window as TypeWindow;\n\n/**\n * Create a class for the plugin instance\n */\nclass BasemapPanelPlugin extends AbstractPluginClass {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(id: string, props: TypePluginOptions) {\n    super(id, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the package schema\n   *\n   * @returns {TypeSchemaObject} the package schema\n   */\n  schema = (): TypeSchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    'en-CA': {\n      basemapPanel: 'Basemaps',\n    },\n    'fr-CA': {\n      basemapPanel: 'Fond de carte',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { configObj, pluginProps } = this;\n\n    const { mapId } = pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      const { api, ui } = cgpv;\n      const { MapIcon } = ui.elements;\n      const { language } = api.map(mapId);\n      // button props\n      const button: TypeIconButtonProps = {\n        id: 'basemapPanelButton',\n        tooltip: this.translations[language].basemapPanel as string,\n        tooltipPlacement: 'right',\n        children: <MapIcon />,\n        visible: true,\n      };\n\n      // panel props\n      const panel: TypePanelProps = {\n        title: this.translations[language].basemapPanel,\n        icon: '<i class=\"material-icons\">map</i>',\n        width: 200,\n        status: configObj?.isOpen as boolean,\n      };\n\n      // create a new button panel on the appbar\n      this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\n\n      // set panel content\n      this.buttonPanel?.panel?.changeContent(<BasemapPanel mapId={mapId} config={configObj || {}} />);\n    }\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      const { api } = cgpv;\n\n      if (this.buttonPanel) {\n        api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.id);\n\n        // reset basemaps array\n        api.map(mapId).basemap.basemaps = [];\n        // reload default basemap\n        api.map(mapId).basemap.loadDefaultBasemaps();\n      }\n    }\n  }\n}\n\nexport default BasemapPanelPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['basemap-panel'] = Cast<AbstractPluginClass>(BasemapPanelPlugin);\n"],"names":["w","window","BasemapPanel","props","mapId","config","cgpv","myMap","api","map","react","ui","elements","Select","Card","CardHeader","CardContent","useState","useEffect","classes","makeStyles","theme","basemapCard","backgroundColor","palette","primary","dark","color","light","display","flexDirection","backgroundClip","border","basemapPanel","borderDefault","borderRadius","boxShadow","marginBottom","transition","header","margin","padding","fontSize","height","width","order","position","objectFit","top","left","overlayDefault","cursor","borderColor","borderHover","overlayHover","borderActive","overlayActive","useStyles","basemapList","setBasemapList","activeBasemapId","setActiveBasemapId","canSwichProjection","projections","supportedProjections","obj","projectionCode","mapProps","projection","mapProjection","setMapProjection","setBasemap","id","basemap","createBasemapArray","basemapsArray","toJsonObject","find","isInit","basemaps","basemapIndex","customBasemap","customBasemaps","createCustomBasemap","prevArray","length","basemapOptions","coreBasemaps","createCoreBasemap","shaded","labeled","fullWidth","labelId","value","onChange","event","target","currentView","getView","currentCenter","getCenter","currentProjection","getProjection","getCode","newCenter","transformPoints","newProjection","newView","zoom","getZoom","minZoom","getMinZoom","maxZoom","getMaxZoom","center","setView","emit","mapViewProjectionPayload","eventNames","MAP","EVENT_MAP_VIEW_PROJECTION_CHANGE","label","style","inputLabel","menuItems","key","item","children","tabIndex","root","className","onClick","onKeyPress","title","name","type","disableTypography","thumbnailUrl","src","alt","altText","Array","isArray","thumbnail","index","BasemapPanelPlugin","schema","defaultConfig","configObj","pluginProps","MapIcon","language","button","tooltip","translations","tooltipPlacement","visible","panel","icon","status","isOpen","buttonPanel","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","loadDefaultBasemaps","AbstractPluginClass","plugins","Cast"],"sourceRoot":""}