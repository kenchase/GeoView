{"version":3,"file":"corePackages/geoview-basemap-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-basemap-panel/src/basemap-panel.tsx","webpack://geoview-core/../geoview-basemap-panel/src/index.tsx"],"sourcesContent":["import {\n  toJsonObject,\n  TypeBasemapProps,\n  TypeBasemapOptions,\n  TypeJsonObject,\n  TypeSelectChangeEvent,\n  TypeWindow,\n  TypeMapView,\n} from 'geoview-core';\n\nimport { mapViewProjectionPayload } from 'geoview-core/src/api/events/payloads/map-view-projection-payload';\n\nconst w = window as TypeWindow;\n\ninterface BaseMapPanelProps {\n  mapId: string;\n  config: TypeJsonObject;\n}\n\nexport function BasemapPanel(props: BaseMapPanelProps): JSX.Element {\n  const { mapId, config } = props;\n\n  const { cgpv } = w;\n  const myMap = cgpv.api.map(mapId);\n\n  const { api, react, ui } = cgpv;\n  const { Select, Card } = ui.elements;\n\n  const { useState, useEffect } = react;\n\n  const [basemapList, setBasemapList] = useState<TypeBasemapProps[]>([]);\n  const [activeBasemapId, setActiveBasemapId] = useState<string>('');\n  const [canSwichProjection] = useState(config.canSwichProjection);\n\n  // TODO: change the path for getting projection on schema refactor\n  const projections: number[] =\n    (config.supportedProjections as Array<TypeJsonObject>).map((obj: TypeJsonObject) => obj?.projectionCode as number) || [];\n  const [mapProjection, setMapProjection] = useState(myMap.mapProps.map.view.projection);\n\n  /**\n   * Update the basemap with the layers on the map\n   *\n   * @param {string} id update the basemap on the map\n   */\n  const setBasemap = (id: string) => {\n    // set the new basemap and update the active basemap variable\n    myMap.basemap.setBasemap(id);\n    setActiveBasemapId(id);\n  };\n\n  /**\n   *  Add basemaps from configuration for selected projection\n   *\n   * @param {number} projection the projection to create basemaps for\n   */\n  const createBasemapArray = async (projection: number) => {\n    const basemapsArray: TypeJsonObject = toJsonObject(\n      (config.supportedProjections as Array<TypeJsonObject>).find((obj: TypeJsonObject) => obj.projectionCode === projection)\n    );\n    let isInit = false;\n\n    // reset the basemaps array\n    api.map(mapId).basemap.basemaps = [];\n    setBasemapList([]);\n\n    // create the custom config basemap\n    for (let basemapIndex = 0; basemapIndex < basemapsArray.customBasemaps.length; basemapIndex++) {\n      const customBasemap = basemapsArray.customBasemaps[basemapIndex] as TypeJsonObject;\n      const basemap = api.map(mapId).basemap.createCustomBasemap(customBasemap as unknown as TypeBasemapProps);\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\n\n      // custom basemap are provided set it by default (can't be set as basemap from geoview config)\n      if (basemap && basemapIndex === 0 && activeBasemapId === '') {\n        setBasemap(basemap.id!);\n        isInit = true;\n      }\n    }\n\n    // create the core basemap\n    for (let basemapIndex = 0; basemapIndex < basemapsArray.coreBasemaps.length; basemapIndex++) {\n      const basemapOptions = basemapsArray.coreBasemaps[basemapIndex] as TypeJsonObject;\n      // eslint-disable-next-line no-await-in-loop\n      const basemap = await api.map(mapId).basemap.createCoreBasemap(basemapOptions as unknown as TypeBasemapOptions, projection);\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\n\n      // set basemap if previously selected in previous projection\n      const id = `${basemapOptions.shaded ? 'shaded' : ''}${basemapOptions.id}${basemapOptions.labeled ? 'label' : ''}`;\n      if (basemap && id === activeBasemapId && !isInit) {\n        setBasemap(activeBasemapId);\n        isInit = true;\n      }\n    }\n\n    // if previous basemap does not exist in previous projection, init first one\n    if (!isInit) setBasemap(myMap.basemap.basemaps[0].id as string);\n  };\n\n  /**\n   * Set new projection view and basemap array\n   *\n   * @param {TypeSelectChangeEvent} event select change element event\n   */\n  const setSelectedProjection = (event: TypeSelectChangeEvent<unknown>) => {\n    const projection = event.target.value as number;\n\n    // set basemap to no geom to clean up the view\n    setBasemap('nogeom');\n    setMapProjection(projection);\n\n    // get view status (center and projection) to calculate new center\n    const currentView = myMap.getView();\n    const currentCenter = currentView.getCenter();\n    const currentProjection = currentView.getProjection().getCode();\n    const newCenter = api.projection.transformPoints(currentCenter, currentProjection, 'EPSG:4326')[0];\n    const newProjection = `EPSG:${event.target.value as number}`;\n\n    const newView: TypeMapView = {\n      zoom: currentView.getZoom() as number,\n      minZoom: currentView.getMinZoom(),\n      maxZoom: currentView.getMaxZoom(),\n      center: newCenter as number[],\n      projection: newProjection,\n    };\n\n    // set new view and basemaps array (with selected basemap)\n    myMap.setView(newView);\n    createBasemapArray(projection);\n\n    // emit an event to let know map view projection as changed\n    api.event.emit(mapViewProjectionPayload(api.eventNames.MAP.EVENT_MAP_VIEW_PROJECTION_CHANGE, mapId, projection));\n  };\n\n  /**\n   * load existing basemaps and create new basemaps\n   */\n  useEffect(() => {\n    createBasemapArray(mapProjection);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      {canSwichProjection && (\n        <Select\n          fullWidth\n          labelId=\"projection-label\"\n          value={mapProjection}\n          onChange={setSelectedProjection}\n          label=\"Projection\"\n          style={{\n            display: config.canSwichProjection ? 'flex' : 'none',\n          }}\n          inputLabel={{\n            id: 'projection-label',\n          }}\n          menuItems={projections.map((value: number) => ({\n            key: value,\n            item: {\n              value,\n              children: `EPSG:${value}`,\n            },\n          }))}\n        />\n      )}\n      {basemapList.map((basemap: TypeBasemapProps) => {\n        return (\n          \n          <Card\n            tabIndex={0}\n            className={`${basemap.id === activeBasemapId ? 'active' : ''}`}\n            onClick={() => setBasemap(basemap.id as string)}\n            onKeyPress={() => setBasemap(basemap.id as string)}\n            key={basemap.id}\n            title={basemap.name}\n            thumbnailUrl={basemap.thumbnailUrl}\n            altText={basemap.altText}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","import {\n  Cast,\n  AbstractPluginClass,\n  TypePluginOptions,\n  TypeIconButtonProps,\n  TypeButtonPanel,\n  TypeWindow,\n  toJsonObject,\n  TypePanelProps,\n  TypeSchemaObject,\n  TypeJsonObject,\n} from 'geoview-core';\n\nimport { BasemapPanel } from './basemap-panel';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-basemap-panel.json';\n\nconst w = window as TypeWindow;\n\n/**\n * Create a class for the plugin instance\n */\nclass BasemapPanelPlugin extends AbstractPluginClass {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(id: string, props: TypePluginOptions) {\n    super(id, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the package schema\n   *\n   * @returns {TypeSchemaObject} the package schema\n   */\n  schema = (): TypeSchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    'en-CA': {\n      basemapPanel: 'Basemaps',\n    },\n    'fr-CA': {\n      basemapPanel: 'Fond de carte',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { configObj, pluginProps } = this;\n\n    const { mapId } = pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      const { api, ui } = cgpv;\n      const { MapIcon } = ui.elements;\n      const { language } = api.map(mapId);\n      // button props\n      const button: TypeIconButtonProps = {\n        id: 'basemapPanelButton',\n        tooltip: this.translations[language].basemapPanel as string,\n        tooltipPlacement: 'right',\n        children: <MapIcon />,\n        visible: true,\n      };\n\n      // panel props\n      const panel: TypePanelProps = {\n        title: this.translations[language].basemapPanel,\n        icon: '<i class=\"material-icons\">map</i>',\n        width: 200,\n        status: configObj?.isOpen as boolean,\n      };\n\n      // create a new button panel on the appbar\n      this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\n\n      // set panel content\n      this.buttonPanel?.panel?.changeContent(<BasemapPanel mapId={mapId} config={configObj || {}} />);\n    }\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      const { api } = cgpv;\n\n      if (this.buttonPanel) {\n        api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.id);\n\n        // reset basemaps array\n        api.map(mapId).basemap.basemaps = [];\n        // reload default basemap\n        api.map(mapId).basemap.loadDefaultBasemaps();\n      }\n    }\n  }\n}\n\nexport default BasemapPanelPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['basemap-panel'] = Cast<AbstractPluginClass>(BasemapPanelPlugin);\n"],"names":["w","window","BasemapPanel","props","mapId","config","cgpv","myMap","api","map","react","ui","elements","Select","Card","useState","useEffect","basemapList","setBasemapList","activeBasemapId","setActiveBasemapId","canSwichProjection","projections","supportedProjections","obj","projectionCode","mapProps","view","projection","mapProjection","setMapProjection","setBasemap","id","basemap","createBasemapArray","basemapsArray","toJsonObject","find","isInit","basemaps","basemapIndex","customBasemap","customBasemaps","createCustomBasemap","prevArray","length","basemapOptions","coreBasemaps","createCoreBasemap","shaded","labeled","fullWidth","labelId","value","onChange","event","target","currentView","getView","currentCenter","getCenter","currentProjection","getProjection","getCode","newCenter","transformPoints","newProjection","newView","zoom","getZoom","minZoom","getMinZoom","maxZoom","getMaxZoom","center","setView","emit","mapViewProjectionPayload","eventNames","MAP","EVENT_MAP_VIEW_PROJECTION_CHANGE","label","style","display","inputLabel","menuItems","key","item","children","tabIndex","className","onClick","onKeyPress","title","name","thumbnailUrl","altText","BasemapPanelPlugin","schema","defaultConfig","basemapPanel","configObj","pluginProps","MapIcon","language","button","tooltip","translations","tooltipPlacement","visible","panel","icon","width","status","isOpen","buttonPanel","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","loadDefaultBasemaps","AbstractPluginClass","plugins","Cast"],"sourceRoot":""}